<?php

namespace app\modules\catalogHeight\models;

use app\modules\catalogHeight\models\query\ImageQuery;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;
use yii\helpers\BaseFileHelper;
use yii\web\UploadedFile;

/**
 * This is the model class for table "image".
 *
 * @property integer $id
 * @property integer $object_id
 * @property integer $object_type
 * @property integer $status
 * @property string $path
 * @property string $title
 * @property integer $sort
 * @property integer $created_at
 * @property integer $updated_at
 * @property integer $created_user
 * @property integer $updated_user
 */
class Image extends \yii\db\ActiveRecord
{
    public const STATUS_ACTIVE = 10;
    public const STATUS_DELETED = 0;

    public const OBJECT_TYPE_PRODUCT = 1;
    public const OBJECT_TYPE_OFFER = 2;

    public const OBJECT_TYPES = [
        self::OBJECT_TYPE_PRODUCT => 'Product',
        self::OBJECT_TYPE_OFFER => 'Offer',
    ];

    /** @var UploadedFile */
    public $file;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'image';
    }

    public function behaviors()
    {
        return [
            TimestampBehavior::class,
            [
                'class'              => BlameableBehavior::class,
                'createdByAttribute' => 'created_user',
                'updatedByAttribute' => 'updated_user',
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['object_id', 'object_type', 'path'], 'required'],
            [
                [
                    'id',
                    'object_id',
                    'object_type',
                    'status',
                    'sort',
                    'created_at',
                    'updated_at',
                    'created_user',
                    'updated_user',
                ],
                'integer',
            ],
            [['path', 'title'], 'string', 'max' => 255],
            [['file'], 'file'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id'           => 'ID',
            'object_id'    => 'Объект',
            'status'       => 'Статус',
            'path'         => 'Путь к файлу',
            'title'        => 'Имя',
            'object_type'  => 'Тип объекта',
            'sort'         => 'Sort',
            'created_at'   => 'Created At',
            'updated_at'   => 'Updated At',
            'created_user' => 'Created User',
            'updated_user' => 'Updated User',
        ];
    }

    /**
     * @param UploadedFile $file
     * @return string
     * @throws \yii\base\Exception
     */
    public function createPath(UploadedFile $file)
    {
        $path = sprintf(
            '%s%s/%s/',
            \Yii::getAlias("@imgPath"),
            substr(md5($file->baseName), 0, 2),
            substr(md5($file->baseName), 2, 2)
        );

        BaseFileHelper::createDirectory(\Yii::getAlias('@webroot') . $path, 0755);

        $path .= md5($file->baseName) . '.' . $file->extension;

        return $path;
    }

    /**
     * @param UploadedFile $file
     * @param ActiveQueryCatalogAbstract $object
     * @return array|\yii\db\ActiveRecord|null
     * @throws \yii\base\Exception
     */
    public function findByFileObject(UploadedFile $file, ActiveQueryCatalogAbstract $object)
    {
        $path = $this->createPath($file);

        if (!file_exists(\Yii::getAlias('@webroot') . $this->path)) {
            return null;
        }

        return $this->find()
            ->where([
                'object_id'   => $object->id,
                'object_type' => $object::getObjectType(),
                'path'        => $path,
            ])
            ->one();
    }

    public function delete()
    {
        unlink(\Yii::getAlias('@webroot') . $this->path);

        return parent::delete(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     * @return ImageQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new ImageQuery(get_called_class());
    }
}
